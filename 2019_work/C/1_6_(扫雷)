#define _CRT_SECURE_NO_WARNINGS 1
#include "stdio.h"
#include "stdlib.h"
#include "windows.h"
#include <conio.h>
#define ROW 15
#define COL 15
int row, col;//代表行列
char map[ROW + 1][COL + 1];
//POS
void pos(int x, int y){  //设置起始位置
	COORD pos; //表示一个字符在控制台上的坐标，左上角（0，0）
	HANDLE h_Output;
	pos.X = x;
	pos.Y = y;
	h_Output = GetStdHandle(STD_OUTPUT_HANDLE);//返回标准的输入、输出或错误的设备的句柄，也就是获得输入、输出/错误的屏幕缓冲区的句柄
	SetConsoleCursorPosition(h_Output, pos);
}
//print_shuzi()
void print_shuzi(){
	int i;
	pos(2, 0);
	for (i = 0; i < ROW + 1; i++){
		printf("%2d", i);
	}
	for (i = 0; i < COL+1; i++){
		pos(0, 1 + i);
		printf("%2d", i);
	}
}
//init() 初始化棋盘
void init(){
	for (int row = 0; row < 16; row++){
		for (int col = 0; col < 16; col++){
			map[row][col] = '*';
		}
	}

}
//print() 打印棋盘
void print(){
	int row, col;
	print_shuzi();
	for (row=0; row < ROW + 1; row++){
		pos(2, 1 + row); //自动换行输入 相似printf("\n");
		for (col = 0; col < COL + 1; col++){
			printf("%c", map[row][col]);
		}
	}
}
//white_play() 白子落
void white_play(){
	printf("\n白方落子：");
	while (1){
	scanf("%d %d", &row, &col);
		if (map[row][col] == '*'&&map[row][col]!='x'){  //该地方无子
			map[row][col] = 'o';
			break;
		}
		else{
			printf("该地方有子重新落子:\n");
		}
	}
	print();
}
//black_play() 黑子落
void black_play(){
	printf("\n黑方落子：");
	while (1){
		scanf("%d %d", &row, &col);
		if (map[row][col] == '*'&&map[row][col] != 'o'){  //该地方无子
			map[row][col] = 'x';
			break;
		}
		else{
			printf("该地方有子重新落子:\n");
		}
	}
	print();
}
//check_win 判断输赢
int check_win(int row,int col){
	char temp; //保存下棋方的旗子属性
	int count = 1; //统计棋子个数
	int i = 1;
	int j = 1;
	int winer = 0; 
	temp = map[row][col];
	//水平左边
	while (temp == map[row][col - i] && row >= 0 && row < 16 && col >= 0 && col < 15 && count < 5){
		i++;
		count++;
		if (count == 5){   //五子棋五个子 开始执行判断
			if (temp == 'o'){
				winer = 1;
			}
			else{
				winer = 2;
			}
		}
	}
		//水平右边
		i = 1;
		while (temp == map[row][col + i] && row >= 0 && row < 16 && col >= 0 && col < 15 && count < 5){
			i++;
			count++;
			if (count == 5){   //五子棋五个子 开始执行判断
				if (temp == 'o'){
					winer = 1;
				}
				else{
					winer = 2;
				}
			}
		}
		//垂直方向
			i = 1;
			count = 1;
			while (temp == map[row - i][col] && row >= 0 && row < 16 && col >= 0 && col < 15 && count < 5){
				i++;
				count++;
				if (count == 5){   //五子棋五个子 开始执行判断
					if (temp == 'o'){
						winer = 1;
					}
					else{
						winer = 2;
					}
				}
			}
			//垂直下方
				i = 1;
				while (temp == map[row + i][col] && row >= 0 && row < 16 && col >= 0 && col < 15 && count < 5){
					i++;
					count++;
					if (count == 5){   //五子棋五个子 开始执行判断
						if (temp == 'o'){
							winer = 1;
						}
						else{
							winer = 2;
						}
					}
				}
			//解决左上方的斜线
					i = 1;
					j = 1;
					count++;
					while (temp == map[row - i][col - j] && row >= 0 && row < 16 && col >= 0 && col < 15 && count < 5){
						i++;
						j++;
						count++;
						if (count == 5){   //五子棋五个子 开始执行判断
							if (temp == 'o'){
								winer = 1;
							}
							else{
								winer = 2;
							}
						}
					}
				//解决左下方的斜线
				i = 1;
				j = 1;
				while (temp == map[row + i][col + j] && row >= 0 && row < 16 && col >= 0 && col < 15 && count < 5){
					i++;
					j++;
					count++;
					if (count == 5){   //五子棋五个子 开始执行判断
						if (temp == 'o'){
							winer = 1;
						}
						else{
							winer = 2;
						}
					}
				}
			//解决右上的斜线
					i = 1;
					j = 1;
					while (temp == map[row + i][col - j] && row >= 0 && row < 16 && col >= 0 && col < 15 && count < 5){
						i++;
						j++;
						count++;
						if (count == 5){   //五子棋五个子 开始执行判断
							if (temp == 'o'){
								winer = 1;
							}
							else{
								winer = 2;
							}
						}
					}
						return winer;
				}

//show_win() 展示winer
int show_win(){
	int overleap = 0; //代表输赢
	int winer; //接收胜利者
	winer = check_win(row,col);
	if (winer == 1){
		overleap = 1;
		system("cls");
		print();
		printf("\n白方胜利");
		system("pause");
	}
	if (winer == 2){
		overleap = 1;
		system("cls");
		print();
		printf("\n黑方胜利");
		system("pause");
	}
	return overleap;
}
//exit() 结束
void startGame(){
	init();  //棋盘初始化
	print(); //打印棋盘
	int input;
	while (1){
		white_play();
		if (show_win() == 1){
			break;
		}
		system("cls");
		black_play();
		if (show_win() == 1){
			break;
		}
		system("cls");
		print();
	}
	printf("1.继续\n 2.退出");
	scanf("%d", &input);
	if (input==1){
		system("cls");
		print("游戏结束\n");
		exit(0);
	}
	if (input==2){
		system("cls");
		startGame();
	}
}
int main(){
	startGame();
	system("pause");
	return 0;
}
