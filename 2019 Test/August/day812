import java.util.*;
public class Solution {
    public ArrayList<Integer> GetLeastNumbers_Solution(int [] input, int k) {
        ArrayList<Integer> sc = new ArrayList<Integer>();
        if(k > input.length){
            return sc;
        }
        for(int i=0;i<input.length;i++){
            for(int j=i+1;j<input.length;j++){
                if(input[i]>input[j]){
                    int tmp = input[i];
                    input[i] = input[j];
                    input[j] = tmp;
                }
            }
        }
        for(int i=0;i<k;i++){
            sc.add(input[i]);
        }
        return sc;
    }
}

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA==null||headB==null){
            return null;
        }
    ListNode a = headA;
    ListNode b = headB;
    
    while(a!=b){
        a =  a==null?headB:a.next;
        b = b==null?headA:b.next;
    }
        return a;
    }
}
import java.util.*;
public class Main{
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        while(sc.hasNext()){
            String str = sc.nextLine();
            int tmp = 0;
            int count = 0;
            int end = 0;
            for(int i=0;i<str.length();i++){
                if(str.charAt(i)>='1' && str.charAt(i)<='9'){
                    count++;
                    if(count>tmp){
                        tmp = count;
                        end = i;
                    }
                }else{
                    count = 0;
                }
            }
            System.out.println(str.substring(end-tmp+1,end+1));
        }
    }
}
