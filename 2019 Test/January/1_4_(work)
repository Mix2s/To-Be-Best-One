#define _CRT_SECURE_NO_WARNINGS 1
#include "stdio.h"
#include "stdlib.h"
#include "math.h"
#include <assert.h>
#include <string.h>
unsigned int reverse_bit(unsigned int value){
	int arr[32] = { 0 };
	printf("反转前 （24）0 0000 1010\n");
	for (int i = 0; i < 32; i++){
		if (((value >> i) & 1) == 1){
			arr[i] = 0;
		}
		else{
			arr[i] = 1;
		}
	}
	printf("反转后 （24）1 1111 0101\n");
	int ret = 0;
	int j = 0;
	for (j = 0; j < 32; j++){
		ret += arr[j] * pow(2, 32 - j);
	}
	return ret;
}
unsigned int reverse_bit_1(unsigned int value){
	int i = 0;
    int sum = 0;
	for (i = 0; i < 32; i++){
		sum += ((value >> i) & 1) << (32 - i);
	}
	return sum;
}
unsigned int reverse_bit_2(unsigned int value){
	int i = 0;
	int ret = 0;
	for (i = 0; i < 32; i++){
		if ((value >> i) & 1){
			ret |= ((value >> i) & 1) << (31 - i);
		}
	}
	return ret;
}
int Average(int a,int b){
	int aver = 0;
	aver = (a + b) >> 1;
	return aver;
}
int Average_1(int a, int b){
	return b + ((a - b) >> 1);
}
int Average_2(int a,int b){
	return (a&b) + ((a^b) >> 1);
}

int Find(int arr[]){
	int i;
	for (i = 1; i < 5; i++){
		arr[0] = arr[0] ^ arr[i];
	}
	return arr[0];
}


void reverse(char *start, char *end){  //倒置整个大字符串
	assert(start);
	assert(end);
	while (start < end){
		char temp = *start;
		*start = *end;  
		*end = temp;
		start++;
		end--;
	}
}
void reverse_string(char *str, int sz){
	assert(str);
	char *str1 = str;
	char *left = str;
	char *right = str + sz - 1;
	reverse(left, right);

	while (*str1){
		left = str1; //数组的首地址 传给left
		while ((*str1 != '\0') && (*str1 != ' ')){   //判定 找到最后一个单词时停止条件
			str1++;
		}
		right = str1 - 1;        //str1 指向单词后方的空格，需要减一方指向单词最后一个字母
		reverse(left, right);   //继整体反转之后 反转每个单词
		if (*str1 == ' '){			//让指针后移一位
			str1++;
		}

	}

}
int main(){
	//unsigned int value = 25;
	////printf("%u\n%x\n", reverse_bit_2(value));
	//int a = 9, b = 8;
	///*printf("%d", Average_2(a, b));*/
	//int arr[5] = { 1, 2, 3, 2, 1 };
	////printf("%d\n",Find(arr));
	char arr[] = "student a am i";
	int sz = strlen(arr);
	reverse_string(arr, sz);
	printf("%s", arr);
	system("pause");
	return 0;
}
