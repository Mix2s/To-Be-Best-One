#define _CRT_SECURE_NO_WARNINGS 1
#include "stdio.h"
#include "stdlib.h"
int main(){
	int a = 10;
	int *p = &a;    //int* 是一个类型 p存放的是 a的地址
	printf("%d", *p);  //*p 解引用 取p地址中存放的内容
	int* pr = 10; 错误 无效的指针 没有在内存中为 10开辟空间 无法
	printf("%d", *pr);

	int n = 10;
	char* pc = (char*)&n;
	int *pi = &n;
	printf("%p\n", &n);
	printf("%p\n", pc);
	printf("%p\n", pc+1); //char类型的地址+1 1个字节
	printf("%p\n", pi);
	printf("%p\n", pi+1);  //int类型的地址+1 4个字节

	int n = 0x11223344;
	char *pc = (char*)&n;
	int *pi = &n;
	*pc = 0x55;
	*pi = 0;
	
	int arr[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 0 };
	printf("%p\n", &arr);
	printf("%p\n", &arr[0]);  //数组名与数组首元素地址相同
	/*int arr[10] = { 1, 2, 3, 4 };
	int *p = arr;
	printf("%p", arr);*/

	/*float *vp;
	float arr[5];
	for (vp = &arr[0]; vp < &arr[5];){
		*vp++ = 0;        *vp 相当于数组元素
	} 
	printf("%d", arr[3]);*/

	float *vp;
	float arr[5];
	for (vp = &arr[5]; vp > &arr[0];){
		*--vp = 0;
	}
	printf("%d", arr[3]); 

	/*int arr[10] = { 1.2,3.4,5 };
	int *p = arr;
	int  sz = sizeof(arr) / sizeof(arr[0]);
	for (int i = 0; i < sz; i++){
		{
			printf("&arr[%d]=%p <======> p+%d = %p\n  ",i,&arr[i],i,p+i,sz);
		}
	}*/

	int arr[10] = { 1.2, 3.4, 5 };
	int *p = arr;
	int  sz = sizeof(arr) / sizeof(arr[0]);
	for (int i = 0; i < sz; i++){
		{
			printf("%d\n", *(p + i));
		}
	}


	system("pause");
	return 0;
}
