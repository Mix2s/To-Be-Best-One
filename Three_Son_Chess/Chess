#define _CRT_SECURE_NO_WARNINGS 1
#include "stdio.h"
#include "stdlib.h"
#include "time.h"
#define ROW 3
#define COL 3
char Chess[ROW][COL];
//初始化棋盘
void init(){
	
	for (int row = 0; row < ROW; row++){
		for (int col = 0; col < COL; col++){
			Chess[row][col] = ' ';
		}
	}
}        
//打印棋盘
void print(){
	//TDDD
	for (int row = 0; row < ROW; row++){
		printf(" %c | %c | %c\n", Chess[row][0],Chess[row][1],Chess[row][2]);
		if (row != ROW - 1){
			printf("---|---|---\n");
		}

	}
}
//玩家落子
void play_Move(){
	//TDDD
	printf("玩家落子，输入坐标(row,col):");
	while (1){
		int row, col;
		scanf("%d %d", &row, &col);
		if (row >= 0 && COL >= 0 && row < ROW && col < COL){
			if (Chess[row][col] == ' '){
				Chess[row][col] = 'x';
				break;
			}
			else{
				printf("该位置有子，重新落子：");
				continue;
			}
		}
		else{
			printf("该位置不符合情况，重新落子：");
			continue;
		}
	}
	system("CLS");
}
//电脑落子
void computer_Move(){
	//TDDD
	int row, col;
	while(1){
		row = rand() % ROW;
		col = rand() % COL;
		if (Chess[row][col] == ' '){
			{
				Chess[row][col] = 'o';
				break;
			}
		}
	}
	system("CLS");

}
//胜负判定
char check(){
	//判断行 胜利
	int row, col;
	for (row = 0; row < ROW; row++){
		if (Chess[row][0] == Chess[row][1] && Chess[row][1] == Chess[row][2]&&Chess[row][1] != ' '){
			return Chess[row][1];
		}
	}
	//判断 列胜利
	for (col = 0; col < COL; col++){
		if (Chess[0][col] == Chess[1][col] && Chess[1][col] ==Chess[2][col] && Chess[1][col] != ' '){
			return Chess[1][col];
		}
	}
	//判断对角线胜利
	if (Chess[0][0] == Chess[1][1] && Chess[2][2] == Chess[1][1] && Chess[0][0] != ' '){
		return Chess[0][0];
	}else
	if (Chess[0][2] == Chess[1][1] && Chess[1][1] == Chess[2][0] && Chess[1][1] != ' '){
		return Chess[1][1];
	}else
	//无子可落时
	if (isFull()){
		return '--';
	}
	else{
		return 0;
	}
}
//棋盘已满无法分出胜负
int isFull(){
	int row, col;
	for (row = 0; row < ROW; row++){
		for (col = 0; col < COL; col++){
			if (Chess[row][col] == ' ')
				return 0;
		}
	}
	return 1;
}
//胜利输出
void victory(char win){
	//TDDD
	if (win == 'o'){
		system("CLS");
		printf("电脑胜利!!n");
		print();
	}
	if (win == 'x'){
		system("CLS");
		printf("玩家胜利!!\n");
		print();
	}
	if (win == '--'){
		system("CLS");
		printf("平局\n");
		print();
	}
}
void Player(){
	char win = 0;
	init(); //初始化棋盘
	srand((unsigned)time(NULL));
	while (1){
		print(); //打印棋盘
		play_Move();  //玩家落子
		win = check();  //检查
		if (win != 0){
			break;
		}
		computer_Move();
		win = check();
		if (win != 0){
			break;
		}
	}
	victory(win);
}
void Computer(){
	char win = 0;
	init(); //初始化棋盘
	srand((unsigned)time(NULL));
	while (1){
		print(); //打印棋盘
		computer_Move();
		play_Move();  //玩家落子
		win = check();  //检查
		if (win != 0){
			break;
		}
		play_Move();
		win = check();
		if (win != 0){
			break;
		}
	}
	victory(win);
}
void Game(){
	system("CLS");
	printf("选择先手：");
	Sub_Meau();
	int input;
	scanf("%d", &input);
	switch (input){
	case 1:
		Player();
		break;
	case 2:
		Computer();
			break;
	}
}
int Sub_Meau(){
		printf("///////////////////////////////\n");
		printf("///// 1.Player  0.computer/////\n");
		printf("///////////////////////////////\n");
	}
void Meau(){
	printf("/////////////////////////\n");
	printf("///// 1.Play  0.exit/////\n");
	printf("/////////////////////////\n");
}
int main(){
	int input;
	Meau();
	scanf("%d", &input);
	switch (input){
	case 1:
		Game();
		break;

	case 2:
		break;
	default:
		break;
	}
	system("pause");
	return 0;
}
